#-------------------------------------------------------------------------------
# Librairies
#-------------------------------------------------------------------------------

from pathlib import Path
import os

# Own
from main import index_to_str, index_to_str

#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------

def Sort_vtk(dict_user):
    '''
    Determine the function called to sort files.
    '''
    if dict_user['reduce_vtk']:
        Sort_vtk_reduced(dict_user)
    else: 
        Sort_vtk_full(dict_user)

#-------------------------------------------------------------------------------

def Sort_vtk_full(dict_user):
    '''
    Sort .vtk files generated by MOOSE.
    '''
    j = 0
    j_str = index_to_str(j)
    filepath = Path('PF_Sintering_other_'+j_str+'.pvtu')
    while filepath.exists():
        for i_proc in range(dict_user['n_proc']):
            os.rename('PF_Sintering_other_'+j_str+'_'+str(i_proc)+'.vtu','output/vtk/PF_Sintering_other_other_'+j_str+'_'+str(i_proc)+'.vtu')
        os.rename('PF_Sintering_other_'+j_str+'.pvtu','output/vtk/PF_Sintering_other_other_'+j_str+'.pvtu')
        j = j + 1
        j_str = index_to_str(j)
        filepath = Path('PF_Sintering_other_'+j_str+'.pvtu')

    # save the last iteration
    dict_user['last_j_str'] = index_to_str(j-1)
    dict_user['last_j'] = j-1

#-------------------------------------------------------------------------------

def Sort_vtk_reduced(dict_user):
    '''
    Sort .vtk files generated by MOOSE.
    Only a part of the files are saved (other deleted).
    '''
    # search the total number of files
    j = 0
    j_str = index_to_str(j)
    filepath = Path('PF_Sintering_other_'+j_str+'.pvtu')
    while filepath.exists():
        j = j + 1
        j_str = index_to_str(j)
        filepath = Path('PF_Sintering_other_'+j_str+'.pvtu')

    # consider the criteria on the maximum number of save
    if j-1 > dict_user['n_vtk_max']:
        f_save = (j-1)/dict_user['n_vtk_max']
    else :
        f_save = 1
    # save index
    i_save = 0

    # sort or delete
    j = 0
    j_str = index_to_str(j)
    filepath = Path('PF_Sintering_other_'+j_str+'.pvtu')
    j_save = 0
    j_save_str = index_to_str(j_save)
    while filepath.exists():
        # save
        if j >= f_save*i_save:
            for i_proc in range(dict_user['n_proc']):
                os.rename('PF_Sintering_other_'+j_str+'_'+str(i_proc)+'.vtu','output/vtk/PF_Sintering_other_'+j_save_str+'_'+str(i_proc)+'.vtu')
            # delete ...
            os.remove('PF_Sintering_other_'+j_str+'.pvtu')
            # ... and rewrite
            file_to_write = open('output/vtk/PF_Sintering_other_'+j_save_str+'.pvtu','w')
            line = '<?xml version="1.0"?>\n'+\
                   '<VTKFile type="PUnstructuredGrid" version="0.1" byte_order="LittleEndian" header_type="UInt32" compressor="vtkZLibDataCompressor">\n'+\
                   '\t<PUnstructuredGrid GhostLevel="1">\n'+\
                   '\t\t<PPointData>\n'+\
                   '\t\t\t<PDataArray type="Int32" Name="libmesh_node_id"/>\n'+\
                   \
                   '\t\t</PPointData>\n'+\
                   '\t\t<PCellData>\n'+\
                   '\t\t\t<PDataArray type="Int32" Name="libmesh_elem_id"/>\n'+\
                   '\t\t\t<PDataArray type="Int32" Name="subdomain_id"/>\n'+\
                   '\t\t\t<PDataArray type="Int32" Name="processor_id"/>\n'+\
                   '\t\t</PCellData>\n'+\
                   '\t\t<PPoints>\n'+\
                   '\t\t\t<PDataArray type="Float64" Name="Points" NumberOfComponents="3"/>\n'+\
                   '\t\t</PPoints>\n'
            file_to_write.write(line)
            for i_proc in range(dict_user['n_proc']):
                line = '\t\t<Piece Source="PF_Sintering_other_'+j_save_str+'_'+str(i_proc)+'.vtu"/>\n'
                file_to_write.write(line)
            line = '\t</PUnstructuredGrid>\n</VTKFile>\n'
            file_to_write.write(line)
            file_to_write.close()
            # next save
            j_save = j_save + 1
            j_save_str = index_to_str(j_save)
            # iterate
            i_save = i_save + 1
        # delete
        else:
            for i_proc in range(dict_user['n_proc']):
                os.remove('PF_Sintering_other_'+j_str+'_'+str(i_proc)+'.vtu')
            os.remove('PF_Sintering_other_'+j_str+'.pvtu')
        # next one
        j = j + 1
        j_str = index_to_str(j)
        filepath = Path('PF_Sintering_other_'+j_str+'.pvtu')
    # save the last iteration
    dict_user['last_j_str'] = index_to_str(j_save-1)
    dict_user['last_j'] = j_save-1